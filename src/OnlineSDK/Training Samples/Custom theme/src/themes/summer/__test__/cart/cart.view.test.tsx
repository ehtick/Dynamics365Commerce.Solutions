/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
import { buildMockModuleProps } from '@msdyn365-commerce/core';
import { ICartlinesViewProps, ICartViewProps } from '@msdyn365-commerce-modules/cart';
import { ICartResources } from '@msdyn365-commerce-modules/cart/src/modules/cart/cart.props.autogenerated';
import { mount, render } from 'enzyme';
import * as React from 'react';

import CartView from '../../views/cart.view';

const mockFunction = jest.fn();
const cartLinesGroup: ICartlinesViewProps[][] = [
    [
        {
            cartline: <div />,
            remove: <div />,
            addToWishlist: undefined,
            addToOrderTemplate: undefined,
            pickUpInStore: {
                callbacks: {
                    toggleBopis: mockFunction
                },

                // @ts-expect-error
                shippingMethod: <div />,
                isBopisSelected: true,
                ContainerProps: {
                    className: 'msc-cart-line__bopis'
                }
            },
            data: {
                cartline: {
                    DeliveryMode: '1'
                }
            }
        }
    ]
];

const mockContext = {
    actionContext: {
        requestContext: {
            channel: {
                EmailDeliveryModeCode: 160
            }
        }
    },
    telemetry: {
        error: mockFunction
    }
};
const mockResources = {
    emptyCartText: 'foo',
    pickUpText: 'foo',
    shippingText: 'foo',
    emailshippingText: 'foo'
} as ICartResources;

const mockTextDiv = 'Foo';
const buttonText = 'button';
const mockTextP = 'mockTextP';
const mockTextHeading = 'mockTextHeading';
describe('Cart view unit tests - View', () => {
    it('renders correctly _renderGroupBOPISBlock', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            invoiceSummaryLineitems: {
                orderTotal: <div />,
                invoices: <div />,
                giftCard: <div />,
                loyalty: <div />
            },
            cartLinesGroup,
            className: 'className',
            title: '<h1>Cart</h1>',
            storeSelector: '{storeSelector}',
            OrderSummaryErrors: {
                Wrapper: { className: 'node-class-Wrapper' },
                header: '{header}',
                errors: ['{}', '{}']
            },
            context: mockContext,
            multiplePickUpEnabled: true,
            cartlines: [
                {
                    cartline: '<div>foo</div>',
                    remove: '<button>button</button>',
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        shippingMethod: '<div>foo</div>',
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined,
                    data: {
                        cartline: {
                            DeliveryMode: 1
                        }
                    }
                },
                {
                    data: {
                        cartline: {
                            DeliveryMode: 160
                        }
                    },
                    cartline: <div>{mockTextDiv}</div>,
                    remove: <button>{buttonText}</button>,
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        defaultComponent: <div>{mockTextDiv}</div>,
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined
                }
            ],
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsSignInUserButton: <button>{buttonText}</button>,
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>,
                totalDiscounts: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };

        // @ts-expect-error
        const component = mount(<CartView {...mockProps} />);
        component
            .find('button')
            .first()
            .simulate('click');
        component
            .find('.msc-cart-line__remove-item')
            .at(3)
            .simulate('click');
        expect(mockFunction).toHaveBeenCalled();
    });
    it('renders correctly with all attributes', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            context: mockContext,
            className: 'className',
            title: '<h1>Cart</h1>',
            storeSelector: '{storeSelector}',
            OrderSummaryErrors: {
                Wrapper: { className: 'node-class-Wrapper' },
                header: '{header}',
                errors: ['{}', '{}']
            },
            cartlines: [
                {
                    cartline: '<div>foo</div>',
                    remove: '<button>button</button>',
                    addToOrderTemplate: '<div>foo</div>',
                    pickUpInStore: undefined,
                    addToWishlist: undefined
                },
                {
                    cartline: '<div>foo</div>',
                    remove: '<button>button</button>',
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        defaultComponent: <div>{mockTextDiv}</div>,
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined
                }
            ],
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsSignInUserButton: '<button>button</button>',
            checkoutAsGuestButton: '<button>button</button>',
            backToShoppingButton: '<button>button</button>',
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>,
                totalDiscounts: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };

        // @ts-expect-error
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no cartlines', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: <h2>{mockTextHeading}</h2>,
            cartlines: undefined,
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>,
                totalDiscounts: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no orderSummary lines', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: <h2>{mockTextHeading}</h2>,
            cartlines: undefined,
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: undefined,
            promoCode: <p>{mockTextP}</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no orderSummarylines with discount lines', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: <h2>{mockTextHeading}</h2>,
            cartlines: undefined,
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>,
                totalDiscounts: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });

    it('renders correctly with no orderSummarylines without discount lines', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            title: <h2>{mockTextHeading}</h2>,
            cartlines: undefined,
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with loading message with props', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            cartLoadingStatus: 'loading',
            title: <h2>{mockTextHeading}</h2>,
            cartlines: undefined,
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with loading message', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            cartLinesGroup: [],
            className: 'className',
            cartEmptyText: 'This cart is empty',
            cartDataResult: true,
            title: <h2>{mockTextHeading}</h2>,
            cartlines: undefined,
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            invoiceSummaryLineitems: {
                orderTotal: <div />,
                invoices: <div />,
                giftCard: <div />,
                loyalty: <div />
            },
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with promotions', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            className: 'className',
            cartEmptyText: 'This cart is empty',
            cartDataResult: true,
            multiplePickUpEnabled: true,
            title: <h2>{mockTextHeading}</h2>,
            cartlines: {
                data: {
                    cartline: [
                        {
                            DeliveryMode: ''
                        }
                    ]
                }
            },
            cart: {
                hasInvoiceLine: true
            },
            cartLinesGroup,
            promotionOptions: {
                promotionMessageWrapper: {
                    className: 'msc-cart__promotion'
                },
                promotionMessage: (
                    <>
                        <span className='msi-promotion-icon' />
                        <span>{mockTextDiv}</span>
                    </>
                ),
                promotionSeeAllLink: (
                    <a href='http://www.xyz.com' className='msc-cart__promotion_link'>
                        {' '}
                        {mockTextDiv}{' '}
                    </a>
                ),
                promotionDialog: <div>{mockTextDiv}</div>
            },
            invoiceSummaryLineitems: {
                orderTotal: <div />,
                invoices: <div />,
                giftCard: <div />,
                loyalty: <div />
            },
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };

        // @ts-expect-error
        const component = mount(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly with promotions and DeliveryMode', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            invoiceSummaryLineitems: {
                orderTotal: <div />,
                invoices: <div />,
                giftCard: <div />,
                loyalty: <div />
            },
            className: 'className',
            title: <h2>{mockTextHeading}</h2>,
            storeSelector: '{storeSelector}',
            OrderSummaryErrors: {
                Wrapper: { className: 'node-class-Wrapper' },
                header: '{header}',
                errors: ['{}', '{}']
            },
            multiplePickUpEnabled: false,
            cartlines: [
                {
                    cartline: <div>{mockTextDiv}</div>,
                    remove: <button>{buttonText}</button>,
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        shippingMethod: <div>{mockTextDiv}</div>,
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined,
                    data: {
                        cartline: {
                            DeliveryMode: 1
                        }
                    }
                },
                {
                    data: {
                        cartline: {
                            DeliveryMode: 160
                        }
                    },
                    cartline: <div>{mockTextDiv}</div>,
                    remove: <button>{buttonText}</button>,
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        defaultComponent: <div>{mockTextDiv}</div>,
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined
                }
            ],
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsSignInUserButton: <button>{buttonText}</button>,
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>,
                totalDiscounts: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };

        // @ts-expect-error
        const component = render(<CartView {...mockProps} />);
        expect(component).toMatchSnapshot();
    });
    it('renders correctly without OrderSummaryErrors', () => {
        const moduleProps: ICartViewProps = buildMockModuleProps({}, {}) as ICartViewProps;
        moduleProps.resources = mockResources;
        const mockProps = {
            ...moduleProps,
            invoiceSummaryLineitems: undefined,
            className: 'className',
            title: <h2>{mockTextHeading}</h2>,
            storeSelector: '{storeSelector}',
            OrderSummaryErrors: {
                Wrapper: { className: 'node-class-Wrapper' },
                header: '{header}',
                errors: ['{}', '{}']
            },
            multiplePickUpEnabled: true,
            cart: {
                hasInvoiceLine: true
            },
            cartlines: [
                {
                    cartline: <div>{mockTextDiv}</div>,
                    remove: <button>{buttonText}</button>,
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        shippingMethod: <div>{mockTextDiv}</div>,
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined,
                    data: {
                        cartline: {
                            DeliveryMode: 1
                        }
                    }
                },
                {
                    data: {
                        cartline: {
                            DeliveryMode: 160
                        }
                    },
                    cartline: <div>{mockTextDiv}</div>,
                    remove: <button>{buttonText}</button>,
                    pickUpInStore: {
                        callbacks: {
                            toggleBopis: jest.fn
                        },
                        defaultComponent: <div>{mockTextDiv}</div>,
                        isBopisSelected: false,
                        ContainerProps: {
                            className: 'msc-cart-line__bopis'
                        }
                    },
                    addToWishlist: undefined,
                    addToOrderTemplate: undefined
                }
            ],
            orderSummaryHeading: <h2>{mockTextHeading}</h2>,
            CartlinesWrapper: { className: 'node-class-CartlinesWrapper' },
            OrderSummaryWrapper: { className: 'node-class-OrderSummaryWrapper' },
            checkoutAsSignInUserButton: <button>{buttonText}</button>,
            checkoutAsGuestButton: <button>{buttonText}</button>,
            backToShoppingButton: <button>{buttonText}</button>,
            orderSummaryLineitems: {
                subtotal: <span>{mockTextDiv}</span>,
                shipping: <span>{mockTextDiv}</span>,
                tax: <span>{mockTextDiv}</span>,
                orderTotal: <span>{mockTextDiv}</span>,
                totalDiscounts: <span>{mockTextDiv}</span>
            },
            promoCode: <p>{mockTextP}</p>
        };

        // @ts-expect-error
        const component = mount(<CartView {...mockProps} />);
        component.setProps({ cartDataResult: true });
        expect(component).toMatchSnapshot();
    });
});
