/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { factories, models, service } from 'powerbi-client';
import { getReportsFromPowerBIGroupAsync } from '../../../themes/fabrikam-extended/data-actions/DataActionExtension.g';
import { IPowerBi } from '../../../themes/fabrikam-extended/data-actions/DataServiceEntities.g';
import { IPowerbiData } from '../powerbi.data';
import { IPowerbiProps } from '../powerbi.props.autogenerated';

const powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);
export interface IPowerBiReportsListProps {
    props: IPowerbiProps<IPowerbiData>;
}

interface IPowerBiReportsListState {
    ReportsDataList: IPowerBi[];
    embedUrl: string;
    embedToken: string;
    showListView: boolean;
    selectedReportId: string;
}

let reportContainer: HTMLElement;
let reportRef: React.Ref<HTMLDivElement>;
let loading: JSX.Element;
/**
 *
 */
export default class PowerBiReportsListComponent extends React.PureComponent<IPowerBiReportsListProps, IPowerBiReportsListState> {
    public constructor(props: IPowerBiReportsListProps) {
        super(props);
        this.state = {
            ReportsDataList: [],
            embedUrl: '',
            embedToken: '',
            showListView: true,
            selectedReportId: ''
        };

        reportRef = React.createRef();

        // Report container
        loading = <div id='reportContainer' ref={reportRef}></div>;
    }

    public async componentDidMount(): Promise<void> {
        if (reportRef !== null) {
            reportContainer = reportRef['current'];
        }

        if (this.props.props.config.workspaceId && this.props.props.config.role) {
            const result: IPowerBi[] = await getReportsFromPowerBIGroupAsync(
                { callerContext: this.props.props.context.actionContext },
                this.props.props.config.workspaceId,
                [this.props.props.config.role]
            );
            result && result.length > 0 && this.onReportClick(result[0].EmbeddUrl!, result[0].EmbeddToken!, result[0].Id!);
            this.setState({
                ReportsDataList: result
            });
        }
    }

    public render(): JSX.Element {
        const { ReportsDataList, selectedReportId, showListView } = this.state;
        if (showListView) {
            return (
                <>
                    <ul>
                        {ReportsDataList.map((listData: IPowerBi) => {
                            if (
                                listData.EmbeddUrl !== undefined &&
                                listData.EmbeddUrl !== '' &&
                                listData.EmbeddToken !== undefined &&
                                listData.EmbeddToken !== ''
                            ) {
                                const classReport = `msc-power-bi-report-name ${selectedReportId === listData.Id ? 'selected' : ''}`;
                                return (
                                    // eslint-disable-next-line react/jsx-key
                                    <li>
                                        <button
                                            className={classReport}
                                            id={listData.Name}
                                            onClick={() => this.onReportClick(listData.EmbeddUrl!, listData.EmbeddToken!, listData.Id!)}
                                        >
                                            {listData.Name}
                                        </button>
                                    </li>
                                );
                            }
                            return null;
                        })}
                    </ul>
                    {loading}
                </>
            );
        }

        return loading;
    }

    private onReportClick(url: string, token: string, reportId: string): void {
        this.setState({
            selectedReportId: reportId
        });
        const embedConfiguration = {
            type: 'report',
            tokenType: models.TokenType.Embed,
            accessToken: token,
            embedUrl: url,

            // Enable this setting to remove gray shoulders from embedded report
            settings: {
                background: models.BackgroundType.Transparent
            }
        };

        const report = powerbi.embed(reportContainer, embedConfiguration);

        // Clear any other loaded handler events
        report.off('loaded');

        // Triggers when a content schema is successfully loaded
        report.on('loaded', function() {
            console.log('Report load successful');
        });

        // Clear any other rendered handler events
        report.off('rendered');

        // Triggers when a content is successfully embedded in UI
        report.on('rendered', function() {
            console.log('Report render successful');
        });

        // Clear any other error handler event
        report.off('error');

        // Below patch of code is for handling errors that occur during embedding
        report.on('error', function(event) {
            const errorMsg = event.detail;

            // Use errorMsg variable to log error in any destination of choice
            console.error(errorMsg);
        });
    }
}
