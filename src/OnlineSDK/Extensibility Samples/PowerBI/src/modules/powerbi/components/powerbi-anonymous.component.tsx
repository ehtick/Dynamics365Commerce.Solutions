/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { factories, models, service } from 'powerbi-client';
import { IPowerBi } from '../../../themes/fabrikam-extended/data-actions/DataServiceEntities.g';
import { IPowerbiData } from '../powerbi.data';
import { IPowerbiProps } from '../powerbi.props.autogenerated';

const powerbi = new service.Service(factories.hpmFactory, factories.wpmpFactory, factories.routerFactory);

interface IPowerBiAnonymousState {
    embedToken: string;
    embedUrl: string;
    error: string[];
}

export interface IPowerBiAnonymousProps {
    props: IPowerbiProps<IPowerbiData>;
}

let reportContainer: HTMLElement;
let reportRef: React.Ref<HTMLDivElement>;
let loading: JSX.Element;

/**
 *
 */
export default class PowerBiAnonymousComponent extends React.PureComponent<IPowerBiAnonymousProps, IPowerBiAnonymousState> {
    public constructor(props: IPowerBiAnonymousProps) {
        super(props);
        this.state = {
            embedToken: '',
            embedUrl: '',
            error: []
        };

        reportRef = React.createRef();

        // Report container
        loading = (
            <div id='reportContainer' ref={reportRef}>
                Loading the report...
            </div>
        );
    }

    public componentDidMount(): void {
        if (reportRef !== null) {
            reportContainer = reportRef['current'];
        }

        this.props.props.data.powerBIDetails.then((powerBIDetail: IPowerBi) => {
            if (powerBIDetail.EmbeddToken && powerBIDetail.EmbeddUrl) {
                this.setState({
                    embedToken: powerBIDetail.EmbeddToken,
                    embedUrl: powerBIDetail.EmbeddUrl
                });
            }
        });
    }

    public render(): JSX.Element {
        if (this.state.error.length) {
            // Cleaning the report container contents and rendering the error message in multiple lines
            reportContainer.textContent = '';
            this.state.error.forEach(line => {
                reportContainer.appendChild(document.createTextNode(line));
                reportContainer.appendChild(document.createElement('br'));
            });
        } else if (this.state.embedToken !== '' && this.state.embedUrl !== '') {
            const embedConfiguration = {
                type: 'report',
                tokenType: models.TokenType.Embed,
                accessToken: this.state.embedToken,
                embedUrl: this.state.embedUrl,

                // Enable this setting to remove gray shoulders from embedded report
                settings: {
                    background: models.BackgroundType.Transparent
                }
            };

            const report = powerbi.embed(reportContainer, embedConfiguration);

            // Clear any other loaded handler events
            report.off('loaded');

            // Triggers when a content schema is successfully loaded
            report.on('loaded', function() {
                console.log('Report load successful');
            });

            // Clear any other rendered handler events
            report.off('rendered');

            // Triggers when a content is successfully embedded in UI
            report.on('rendered', function() {
                console.log('Report render successful');
            });

            // Clear any other error handler event
            report.off('error');

            // Below patch of code is for handling errors that occur during embedding
            report.on('error', function(event) {
                const errorMsg = event.detail;

                // Use errorMsg variable to log error in any destination of choice
                console.error(errorMsg);
            });
        }

        return loading;
    }
}
