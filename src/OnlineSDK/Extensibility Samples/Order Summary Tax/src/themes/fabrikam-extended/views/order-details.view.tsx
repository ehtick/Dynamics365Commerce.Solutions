/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
import {
    IHelp,
    IPaymentMethods,
    IPriceContext,
    IGroup,
    IGroupDelivery,
    IGroups,
    IOrderInformation,
    ISalesLine,
    IOrderDetailsViewProps
} from '@msdyn365-commerce-modules/order-management';
import { PriceComponent } from '@msdyn365-commerce/components';
import { ChannelDeliveryOptionConfiguration, SalesLine } from '@msdyn365-commerce/retail-proxy';
import { IOrderDetailsProps, IOrderDetailsResources } from '../definition-extensions/order-details.ext.props.autogenerated';

interface ISummaryLineProps {
    priceContext?: IPriceContext;
    name: string;
    label: string;
    value?: number;
}

export const OrderDetailsOrderInfomation: React.FC<IOrderInformation> = ({
    orderInformationProps,
    salesId,
    receiptId,
    createdDate,
    count,
    amount,
    channelReferenceId,
    channelName,
    channelAddress
}) => (
    <Node {...orderInformationProps}>
        {channelName}
        {channelAddress}
        {channelReferenceId}
        {salesId}
        {receiptId}
        {createdDate}
        {count}
        {amount}
    </Node>
);

export const OrderDetailsSalesLine: React.FC<ISalesLine> = ({ salesLineProps, salesLine, buyAgainButton }) => (
    <Node {...salesLineProps}>
        {salesLine}
        {buyAgainButton}
    </Node>
);

export const OrderDetailsGroupDelivery: React.FC<IGroupDelivery> = ({
    deliveryProps,
    heading,
    count,
    trackingInfo,
    shippedStatusCheck
}) => (
    <Node {...deliveryProps}>
        {heading}
        {count}
        {shippedStatusCheck === 'processing' ? trackingInfo : null}
    </Node>
);

export const OrderDetailsGroup: React.FC<IGroup> = ({
    groupProps,
    delivery,
    address,
    salesLinesProps,
    salesLines,
    isCashAndCarryTransaction
}) => (
    <Node {...groupProps}>
        {delivery && <OrderDetailsGroupDelivery {...delivery} />}
        {salesLines && (
            <Node {...salesLinesProps}>
                {salesLines.map(salesLine => (
                    <React.Fragment key={salesLine.data.salesLine.LineId}>
                        {salesLine.data.deliveryType === 'ship' && salesLine.data.shipment ? salesLine.trackingInfo : null}
                        <OrderDetailsSalesLine {...salesLine} />
                        {!isCashAndCarryTransaction && salesLine.salesStatus}
                    </React.Fragment>
                ))}
            </Node>
        )}
        {!delivery.showTimeslot && address}
        {delivery.showTimeslot && (
            <Node {...delivery.pickupProps}>
                {address}
                {delivery.pickupDateTimeslot}
            </Node>
        )}
    </Node>
);

export const OrderDetailsGroups: React.FC<IGroups> = ({ groupsProps, groups }) => (
    <Node {...groupsProps}>
        {groups.map((group: IGroup, index: number) => (
            <OrderDetailsGroup key={index} {...group} />
        ))}
    </Node>
);

function priceContext(props: IOrderDetailsViewProps): IPriceContext {
    const {
        id,
        typeName,
        context,
        telemetry,
        resources: { freePriceText }
    } = props;
    return {
        id,
        typeName,
        context,
        telemetry,
        freePriceText
    };
}
function shippingAmount(props: IOrderDetailsViewProps): JSX.Element | null {
    const { request } = props.context;
    // shippingChargeCode represents the code for shipping charge configured in HQ
    const shippingChargeCode = 'FREIGHT';
    const ChargeAmount = props.data.orderHydration.result?.salesOrder.ChargeAmount;
    const salesOrderSalesLines = props.data.orderHydration.result?.salesOrder?.SalesLines || [];
    const salesOrderChargeLines = props.data.orderHydration.result?.salesOrder?.ChargeLines || [];
    let ShippingChargeAmount = 0;
    if (salesOrderChargeLines.length > 0) {
        salesOrderChargeLines.map(ChargeLine => {
            const chargeLines = ChargeLine.CalculatedAmount || 0;
            ShippingChargeAmount = ShippingChargeAmount + chargeLines;
        });
    } else if (salesOrderSalesLines && salesOrderSalesLines.length > 0) {
        salesOrderSalesLines.map(salesLine => {
            const shippingChargeLines = (salesLine.ChargeLines || []).filter(chargeLine => chargeLine.ChargeCode === shippingChargeCode);
            const calculatedAmount = shippingChargeLines[0]?.CalculatedAmount || 0;
            const valueAmount = shippingChargeLines[0]?.Value || 0;
            if (calculatedAmount || valueAmount) {
                ShippingChargeAmount = calculatedAmount ? ShippingChargeAmount + calculatedAmount : ShippingChargeAmount + valueAmount;
            }
        });
    }
    const multiplePickupStoreSwitchName = 'Dynamics.AX.Application.RetailMultiplePickupDeliveryModeFeature';
    const orderDetailsLines = props.data.orderHydration.result?.salesOrder.SalesLines;
    const { channelDeliveryOptionConfig, featureState } = props?.data;
    const retailMultiplePickUpOptionEnabled = featureState?.result?.find(item => item.Name === multiplePickupStoreSwitchName)?.IsEnabled;
    const pickupDeliveryModeCode = request && request.channel && request.channel.PickupDeliveryModeCode;
    const emailDeliveryModeCode = request && request.channel && request.channel.EmailDeliveryModeCode;
    const canShip = orderDetailsLines?.some(orderDetailsLine =>
        orderDetailsLine.DeliveryMode && orderDetailsLine.DeliveryMode !== ''
            ? orderDetailsLine.DeliveryMode !==
                  getDeliveryMode(
                      orderDetailsLine,
                      retailMultiplePickUpOptionEnabled,
                      channelDeliveryOptionConfig?.result,
                      pickupDeliveryModeCode
                  ) && orderDetailsLine.DeliveryMode !== emailDeliveryModeCode
            : orderDetailsLine
    );
    return canShip ? (
        <OrderSummaryLine
            name='shipping'
            label={props.resources.orderSummaryShippingFeeLabel}
            value={ShippingChargeAmount === 0 ? ChargeAmount : ShippingChargeAmount}
            priceContext={priceContext(props)}
        />
    ) : null;
}

function renderOtherChargeAmount(props: IOrderDetailsViewProps & IOrderDetailsProps<IOrderDetailsResources>): JSX.Element | null {
    const salesOrder = props.data.orderHydration.result?.salesOrder;
    let totalOtherChargeAmount = 0;
    salesOrder!.SalesLines?.map(salesLine => {
        const otherCharges = salesLine.ChargeLines?.filter(chargeline => chargeline.ChargeCode === 'OTHER');
        otherCharges &&
            otherCharges.map((otherCharge, key) => {
                totalOtherChargeAmount = totalOtherChargeAmount + otherCharge.CalculatedAmount!;
            });
    });
    return totalOtherChargeAmount ? (
        <OrderSummaryLine
            name='other-charge'
            label={props.resources.otherCharges}
            value={totalOtherChargeAmount}
            priceContext={priceContext(props)}
        />
    ) : null;
}

const getDeliveryMode = (
    salesLine: SalesLine,
    featureSate: boolean = false,
    channelDeliveryOptionConfig?: ChannelDeliveryOptionConfiguration,
    pickupDeliveryMode?: string
) => {
    if (!featureSate) {
        return pickupDeliveryMode;
    }
    return channelDeliveryOptionConfig?.PickupDeliveryModeCodes?.find(deliveryMode => deliveryMode === salesLine.DeliveryMode);
};

const OrderSummaryLine: React.SFC<ISummaryLineProps> = ({ name, label, value = 0, priceContext }) => (
    <p className={`ms-order-details__order-summary-line-${name}`}>
        <span className='ms-order-details__order-summary-label'>{label}</span>
        {priceContext ? (
            <PriceComponent
                {...priceContext}
                className='ms-order-details__order-summary-price'
                data={{ price: { CustomerContextualPrice: value } }}
            />
        ) : (
            <span className='ms-order-details__order-summary-price'>{value}</span>
        )}
    </p>
);

export const OrderDetailsOrderSummary: React.FC<IOrderDetailsViewProps & IOrderDetailsProps<IOrderDetailsResources>> = (
    props: IOrderDetailsViewProps & IOrderDetailsProps<IOrderDetailsResources>
) => {
    const { orderSummaryProps, heading, subtotal, tax, totalAmount, earnedPoints } = props.orderSummary!;
    return (
        <Node {...orderSummaryProps}>
            {heading}
            {subtotal}
            {shippingAmount(props)}
            {renderOtherChargeAmount(props)}
            {tax}
            {totalAmount}
            {earnedPoints}
        </Node>
    );
};

export const OrderDetailsPayment: React.FC<IPaymentMethods> = ({ paymentMethodsProps, title, methods }) => (
    <Node {...paymentMethodsProps}>
        {title}
        {methods}
    </Node>
);

export const OrderDetailsHelp: React.FC<IHelp> = ({ helpProps, needHelpLabel, helpLineNumberLabel, contactNumber }) => (
    <Node {...helpProps}>
        {needHelpLabel}
        {helpLineNumberLabel}
        {contactNumber}
    </Node>
);

const OrderDetailsView: React.FC<IOrderDetailsViewProps & IOrderDetailsProps<IOrderDetailsResources>> = props => {
    const { moduleProps, heading, alert, loading, orderInfomation, orderSummary, payment, help, groups } = props;
    return (
        <Module {...moduleProps}>
            {heading}
            {alert}
            {loading}
            {orderInfomation && <OrderDetailsOrderInfomation {...orderInfomation} />}
            {groups && <OrderDetailsGroups {...groups} />}
            {orderSummary && <OrderDetailsOrderSummary {...props} />}
            {payment && <OrderDetailsPayment {...payment} />}
            {help && <OrderDetailsHelp {...help} />}
        </Module>
    );
};

export default OrderDetailsView;
