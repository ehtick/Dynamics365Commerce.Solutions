/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';

import { ICoreContext } from '@msdyn365-commerce/core';
import {
    IBuyboxAddToCartViewProps,
    IBuyboxAddToOrderTemplateViewProps,
    IBuyboxAddToWishlistViewProps,
    IBuyboxKeyInPriceViewProps,
    IBuyboxProductConfigureDropdownViewProps,
    IBuyboxProductConfigureViewProps,
    IBuyboxProductQuantityViewProps,
    IBuyboxShopSimilarLookViewProps
} from '@msdyn365-commerce-modules/buybox/src/modules/buybox/../../common';
import { IBuyboxViewProps } from '@msdyn365-commerce-modules/buybox/src/modules/buybox/./buybox';
import { IBuyboxFindInStoreViewProps } from '@msdyn365-commerce-modules/buybox/src/modules/buybox/./components/buybox-find-in-store';
import { ArrayExtensions, DimensionTypes } from '@msdyn365-commerce-modules/retail-actions';
import { AsyncResult, AttributeValue } from '@msdyn365-commerce/retail-proxy';
import { IBuyboxProps as IBuyboxExtentionProps } from '../definition-extensions/buybox.ext.props.autogenerated';

export enum BadgesDisplayTypes {
    none = 'none',
    browsing = 'browsing',
    browsingPDP = 'PDP'
}
/**
 * This setting defines the inventory levels supported.
 */
export declare enum InventoryLevels {
    physicalAvailable = 'physicalAvailable',
    totalAvailable = 'totalAvailable',
    threshold = 'inventoryThreshold'
}
/**
 * Represents app configuration for dimensions.
 */
export interface IDimensionsApp {
    config: IDimensionsConfig;
}

export interface IDimensionsConfig {
    dimensionsAsSwatchType?: DimensionTypes[];
    dimensionsInProductCard?: DimensionTypes[];
    isAtributeBadgeEnabled?: boolean;
    enableBadgeOnModule?: BadgesDisplayTypes[];
    dimensionsInBadgeAtribute?: string;
    inventoryLevel?: InventoryLevels;
    dimensionToPreSelectInProductCard?: DimensionTypes;
}

export interface IBuyboxExtData {
    productAttributes: AsyncResult<AttributeValue[]>;
}

const BuyboxView: React.FC<IBuyboxViewProps & IBuyboxExtentionProps<IBuyboxExtData>> = props => {
    const {
        ModuleProps,
        MediaGalleryContainerProps,
        ProductInfoContainerProps,
        addToCart,
        addToOrderTemplate,
        addToWishlist,
        configure,
        description,
        findInStore,
        quantity,
        price,
        title,
        rating,
        inventoryLabel,
        shopSimilarLook,
        keyInPrice,
        shopSimilarDescription,
        unitOfMeasure
    } = props;

    return (
        <Module {...ModuleProps}>
            <Node {...MediaGalleryContainerProps}>{props.mediaGallery}</Node>
            <Node {...ProductInfoContainerProps}>
                {title}
                {price}
                {unitOfMeasure}
                {props.bulkPurchaseLink}
                {description}
                {getProductBadges(props)}
                {rating}
                {configure && _renderConfigure(configure)}
                {keyInPrice && _renderKeyInPrice(keyInPrice)}
                {quantity && _renderQuantity(quantity)}
                {inventoryLabel}
                {addToCart && _renderAddToCart(addToCart)}
                {findInStore && _renderFindInStore(findInStore)}
                {addToOrderTemplate && _renderAddToOrderTemplate(addToOrderTemplate)}
                {addToWishlist && _renderAddToWishlist(addToWishlist)}
                {_renderSocialShare(props.slots && props.slots.socialShare)}
                {shopSimilarLook && _renderShopSimilarItem(shopSimilarLook)}
                {shopSimilarDescription && _renderShopSimilarItem(shopSimilarDescription)}
            </Node>
        </Module>
    );
};

const checkIfShouldDisplayAttributeBadges = (
    attribute: string,
    context: ICoreContext<IDimensionsApp>,
    displayType: BadgesDisplayTypes = BadgesDisplayTypes.none
): boolean => {
    // Shift() is used to take the first element on the attributes provided if removed all atributes are going to be rendered .shift();
    if (!context.app.config.dimensionsInBadgeAtribute) {
        return false;
    }
    const compareDimentions = context.app.config.dimensionsInBadgeAtribute.split(',').shift();
    const attributeList = compareDimentions
        ? compareDimentions
              .toLocaleLowerCase()
              .trim()
              .split(' ')
              .join('')
        : '';
    const newAttribute = attribute
        .toLocaleLowerCase()
        .trim()
        .split(' ')
        .join('');

    const dimensionsToDisplayOnProductCard = context.app.config.enableBadgeOnModule;
    if (
        !ArrayExtensions.hasElements(dimensionsToDisplayOnProductCard) ||
        dimensionsToDisplayOnProductCard.includes(BadgesDisplayTypes.none) ||
        !dimensionsToDisplayOnProductCard.includes(displayType) ||
        !context.app.config.isAtributeBadgeEnabled ||
        attributeList !== newAttribute
    ) {
        return false;
    }

    return true;
};

export function getProductBadges(props: IBuyboxViewProps & IBuyboxExtentionProps<IBuyboxExtData>): React.ReactElement | undefined {
    const productAttributes = props.data.productAttributes.result;

    if (!productAttributes) {
        return undefined;
    }

    const badgeAttributeItems = ArrayExtensions.validValues(
        productAttributes.map(item => {
            const dimensionAttributeValue = item.Name?.toLocaleLowerCase().trim() ?? '';
            const dimensionAttributeTextValue = item.TextValue ?? '';
            if (dimensionAttributeValue === '' || dimensionAttributeTextValue === '') {
                return null;
            }
            const shouldDisplayBadge = checkIfShouldDisplayAttributeBadges(
                dimensionAttributeValue,
                props.context as ICoreContext<IDimensionsApp>,
                BadgesDisplayTypes.browsingPDP
            );
            if (!shouldDisplayBadge) {
                return null;
            }

            const attributes = <p>{item.TextValue}</p>;

            return { recordId: item.RecordId, attributes };
        })
    );

    if (!ArrayExtensions.hasElements(badgeAttributeItems)) {
        return undefined;
    }

    return (
        <div className='msc-product-badges'>
            {badgeAttributeItems.map(item => {
                return (
                    <div className='msc-product-badges__item ' key={item.recordId}>
                        <div className='msc-product-badges__content'>{item.attributes}</div>
                    </div>
                );
            })}
        </div>
    );
}

const _renderAddToCart = (addToCart: IBuyboxAddToCartViewProps): JSX.Element => {
    const { ContainerProps, errorBlock, button } = addToCart;

    return (
        <Node {...ContainerProps}>
            {errorBlock}
            {button}
        </Node>
    );
};

const _renderAddToOrderTemplate = (addToOrderTemplate: IBuyboxAddToOrderTemplateViewProps): JSX.Element => {
    const { ContainerProps, errorBlock, button } = addToOrderTemplate;

    return (
        <Node {...ContainerProps}>
            {errorBlock}
            {button}
        </Node>
    );
};

const _renderAddToWishlist = (addToWishlist: IBuyboxAddToWishlistViewProps): JSX.Element => {
    const { ContainerProps, errorBlock, button } = addToWishlist;

    return (
        <Node {...ContainerProps}>
            {errorBlock}
            {button}
        </Node>
    );
};

const _renderConfigure = (configure: IBuyboxProductConfigureViewProps): JSX.Element => {
    const { ContainerProps, dropdowns } = configure;

    return <Node {...ContainerProps}>{dropdowns.map(_renderConfigureDropdown)}</Node>;
};

const _renderSocialShare = (socialShare: React.ReactNode[]): JSX.Element | undefined => {
    if (!socialShare || socialShare.length === 0) {
        return undefined;
    }

    return <>{socialShare[0]}</>;
};

const _renderConfigureDropdown = (dropdown: IBuyboxProductConfigureDropdownViewProps): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, errors, select } = dropdown;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>
                {heading}
                {errors}
            </Node>
            {select}
        </Node>
    );
};

const _renderFindInStore = (findInStore: IBuyboxFindInStoreViewProps): JSX.Element => {
    const { ContainerProps, storeSelector, heading, description, errors, button, modal, productPickupOptionList } = findInStore;

    return (
        <Node {...ContainerProps}>
            {storeSelector}
            {heading}
            {productPickupOptionList}
            {description}
            {errors}
            {button}
            {modal}
        </Node>
    );
};

const _renderQuantity = (quantity: IBuyboxProductQuantityViewProps): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, input, errors } = quantity;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>
                {heading}
                {errors}
            </Node>
            {input}
        </Node>
    );
};

const _renderKeyInPrice = (keyInPrice: IBuyboxKeyInPriceViewProps): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, input } = keyInPrice;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>{heading}</Node>
            {input}
        </Node>
    );
};

const _renderShopSimilarItem = (shopSimilarItem: IBuyboxShopSimilarLookViewProps): JSX.Element => {
    const { ContainerProps, errors, input } = shopSimilarItem;

    return (
        <Node {...ContainerProps}>
            {errors}
            {input}
        </Node>
    );
};
export default BuyboxView;
