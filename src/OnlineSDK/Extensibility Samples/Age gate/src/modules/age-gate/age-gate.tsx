/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as Msdyn365 from '@msdyn365-commerce/core';
import { Button, IModuleProps, INodeProps, Modal, ModalBody, ModalHeader } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';

import { IAgeGateProps, IAgeGateConfig } from './age-gate.props.autogenerated';

/**
 * Consent button options.
 */
enum consentButton {
    DEFAULT_TEXT = 'YES'
}

/**
 * Cookie value options.
 */
enum cookieValueAgeVerified {
    TRUE = 'true',
    FALSE = 'false'
}

/**
 * Age Gate state.
 */
export interface IAgeGateState {
    isVisible: boolean;
}

/**
 * Age Gate view props.
 */
export interface IAgeGateViewProps extends IAgeGateProps<IAgeGateConfig> {
    moduleProps: IModuleProps;
    headerContainerProps: INodeProps;
    headerProps?: React.ReactNode;
    bodyContainerProps: INodeProps;
    bodyContent: React.ReactNode;
    consentButton: React.ReactNode;
    className: string;
    onDismiss(): void;
}

/**
 *
 * Age Gate component.
 * @extends {React.PureComponent<IAgeGateProps<IAgeGateConfig>, IAgeGateState>}
 */
class AgeGate extends React.PureComponent<IAgeGateProps<IAgeGateConfig>, IAgeGateState> {
    constructor(props: IAgeGateProps<IAgeGateConfig>) {
        super(props);
        this.state = { isVisible: false };
    }

    public componentDidMount(): void {
        const { ageGateCookieName } = this.props.context.app.config;
        const cookieName = (ageGateCookieName as string) || '_msdyn365__ageGate_';

        if (!this._isActionTaken(cookieName)) {
            this.setState({
                isVisible: true
            });
        }
    }

    public render(): JSX.Element | null {
        const {
            config: { className, heading, consentButtonText },
            slots: { content },
            resources
        } = this.props;

        const viewProps = {
            ...this.props,
            onDismiss: this._onDismiss,
            moduleProps: {
                tag: Modal,
                moduleProps: this.props,
                className: classnames('ms-age-gate', className),
                autoFocus: true,
                backdrop: 'static',
                fade: true,
                isOpen: this.state.isVisible,
                'aria-label': heading ?? resources.ageGateAriaLabel,
                onClosed: this._onDismiss,
                horizontalPosition: 'center',
                verticalPosition: 'center',
                toggle: this._onDismiss
            },
            headerContainerProps: {
                tag: ModalHeader,
                className: 'ms-age-gate__modal-header',
                toggle: this._onDismiss
            },
            headerProps: heading && (
                <Msdyn365.Text
                    className='ms-age-gate__modal-title'
                    {...heading}
                    tag='h2'
                    text={heading}
                    editProps={{ onEdit: this.handleHeadingChange, requestContext: this.props.context.request }}
                />
            ),
            bodyContainerProps: {
                tag: ModalBody,
                className: 'ms-age-gate__modal-body'
            },
            bodyContent: content.map((item: React.ReactNode, index: number) => this._getContentItem(item, index)),
            consentButton: (
                <Button
                    className={'ms-age-gate__accept-button'}
                    title={consentButtonText || consentButton.DEFAULT_TEXT}
                    onClick={this._handleConsent}
                >
                    {consentButtonText || consentButton.DEFAULT_TEXT}
                </Button>
            )
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    /**
     * Handle the heading change event.
     * @param event - Content Editable Event.
     */
    public handleHeadingChange = (event: Msdyn365.ContentEditableEvent): void => {
        this.props.config.heading = event.target.value;
    };

    /**
     * _isActionTaken method - To check cookie value.
     * @param cookieName - Cookie name.
     * @returns - Boolean value for existence of cookie or it's value itself.
     */
    private readonly _isActionTaken = (cookieName: string): boolean => {
        const cookies = this.props.context.request.cookies;
        const ageGateCookie = cookies.get(cookieName) as Msdyn365.ICookieValue<{}> | undefined;

        if (!ageGateCookie || ageGateCookie.value === cookieValueAgeVerified.FALSE) {
            return false;
        }

        return !!ageGateCookie.value;
    };

    /**
     * _onDismiss method - To dismiss age-gate pop up.
     */
    private readonly _onDismiss = (): void => {
        this.setState({
            isVisible: false
        });
    };

    /**
     * _handleConsent method - To handle consent.
     */
    private readonly _handleConsent = (): void => {
        const { ageGateCookieName } = this.props.context.app.config;
        const { cookies } = this.props.context.request;
        const cookieAge: number = 172800;
        const cookieName = (ageGateCookieName as string) || '_msdyn365__ageGate_';
        cookies?.set(cookieName, cookieValueAgeVerified.TRUE, { maxAge: cookieAge });
        this._onDismiss();
    };

    /**
     * _getContentItem method - To get age gate pop up content.
     * @param item - Age gate pop up item.
     * @param index - Index.
     * @returns - Age gate pop up content as react element.
     */
    private readonly _getContentItem = (item: React.ReactNode, index: number): React.ReactNode => {
        return <React.Fragment key={index}>{React.cloneElement(item as React.ReactElement)}</React.Fragment>;
    };
}

export default AgeGate;
