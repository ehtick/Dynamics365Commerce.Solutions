/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import {
    imageSource,
    IMediaGalleryThumbnailItemViewProps,
    IMediaGalleryThumbnailsViewProps,
    IMediaGalleryViewProps
} from '@msdyn365-commerce-modules/media-gallery';
import { ArrayExtensions } from '@msdyn365-commerce-modules/retail-actions';
import { Button, KeyCodes, Module, Node, NodeTag } from '@msdyn365-commerce-modules/utilities';
import { IVideoMetadata, Player, IPlayerOptions, IPlayerData } from '@msdyn365-commerce/components';
import { commerceVideoMetadataRequest, IImageData, IImageSettings, Image, IVideoFileDataLinks, Video } from '@msdyn365-commerce/core';
import classnames from 'classnames';
import React from 'react';
import { AttributeValue, AsyncResult } from '@msdyn365-commerce/retail-proxy';
import { IMediaGalleryConfig, IMediaGalleryProps } from '../definition-extensions/media-gallery.ext.props.autogenerated';

interface IVideoData {
    _links?: IVideoFileDataLinks;
    playtime?: number;
    subtitle?: string;
    thumbnail?: IImageData;
    title?: string;
    description?: string;
    interactiveTriggersEnabled?: boolean;
    minimumAge?: number;
    _id?: string;
    locale?: string;
}

export interface IMediaGalleryExtProps {
    productAttributes: AsyncResult<AttributeValue[]>;
}

enum CustomAttributes {
    videoIdAttribute = 'videoId'
}

/**
 *
 * The MediaGalleryView class.
 * @extends {React.component<IMediaGalleryViewProps & IMediaGalleryProps<IMediaGalleryConfig & IMediaGalleryExtProps>>}
 */
class MediaGalleryView extends React.Component<IMediaGalleryViewProps & IMediaGalleryProps<IMediaGalleryConfig & IMediaGalleryExtProps>> {
    private videoData: IVideoData | undefined;

    private readonly defaultThumbnailImageSettings: IImageSettings = {
        viewports: {
            xs: { q: 'w=295&h=295&q=80&m=6&f=jpg', w: 295, h: 295 },
            xl: { q: 'w=295&h=295&q=80&m=6&f=jpg', w: 295, h: 295 }
        },
        lazyload: true,
        cropFocalRegion: true
    };

    constructor(props: IMediaGalleryViewProps & IMediaGalleryProps<IMediaGalleryConfig & IMediaGalleryExtProps>) {
        super(props);
        this.state = {
            videoData: {}
        };
    }

    public render(): JSX.Element {
        const { CarouselProps, Thumbnails, MediaGallery, Modal } = this.props;
        return (
            <Module {...MediaGallery}>
                <Node {...CarouselProps} />
                {Modal}
                {this.renderThumbnails(Thumbnails, this.props)}
            </Module>
        );
    }

    public componentDidMount = async (): Promise<void> => {
        await this.getVideoMetadataFromApi();
    };

    /**
     * Render the thumbnail item images.
     * @param thumbnail - The carousel thumbnail line props.
     * @returns Return HTML having thumnailcontainer props with image.
     */
    private readonly renderThumbnailItem = (thumbnail: IMediaGalleryThumbnailItemViewProps): JSX.Element => {
        // eslint-disable-next-line @typescript-eslint/naming-convention --  Dependency from media-gallery.tsx file
        const { ThumbnailItemContainerProps, Picture } = thumbnail;

        return <Node {...ThumbnailItemContainerProps}>{Picture}</Node>;
    };

    /**
     * Gets the empty thumbnail item to display media gallery images.
     * @param imageSettings - Image settings for the image gallery items.
     * @param props - The Media gallery view props from business layer.
     * @returns Return thumbnail view props which will be used to render empty images.
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    private readonly GetEmptyThumbnailItemComponent = (
        imageSettings: IImageSettings,
        props: IMediaGalleryViewProps
    ): IMediaGalleryThumbnailItemViewProps => {
        return {
            ThumbnailItemContainerProps: {
                tag: 'li' as NodeTag,
                className: 'ms-media-gallery__thumbnail-item',
                role: 'tab',
                tabIndex: 0,
                key: 0,
                'aria-label': '',
                'aria-selected': true
            },
            Picture: (
                <Image
                    requestContext={props.context.actionContext.requestContext}
                    className='ms-media-gallery__thumbnail-item__image'
                    src='empty'
                    gridSettings={props.context.request.gridSettings!}
                    imageSettings={props.config.thumbnailImageSettings ?? imageSettings}
                    loadFailureBehavior='empty'
                />
            )
        };
    };

    /**
     * Gets the thumbnail item to display media gallery images.
     * @param image - The media gallery images.
     * @param imageSettings - Image settings for the image gallery items.
     * @param imageId - Image id.
     * @param modifiedActiveIndex - Modified Index of the images when selection changes.
     * @param props - The Media gallery view props from business layer.
     * @returns Return thumbnail view props which will be used to render images.
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention
    private readonly GetThumbnailItemComponent = (
        image: IImageData,
        imageSettings: IImageSettings,
        imageId: number,
        modifiedActiveIndex: number,
        props: IMediaGalleryViewProps
    ): IMediaGalleryThumbnailItemViewProps => {
        const onClick = () => {
            props.callbackToggle?.();
            props.callbackThumbnailClick?.(imageId);
        };

        const classes = classnames(
            'ms-media-gallery__thumbnail-item',
            modifiedActiveIndex === imageId ? 'ms-media-gallery__thumbnail-item-active' : ''
        );

        const handleKeyDown = (event: React.KeyboardEvent) => {
            if (event.keyCode === KeyCodes.Enter) {
                onClick();
            }
        };

        return {
            ThumbnailItemContainerProps: {
                tag: 'li' as NodeTag,
                className: classes,
                role: 'presentation',
                key: imageSource?.productId
            },
            Picture: (
                <Node className='ms-fullscreen-section'>
                    <Button
                        role='tab'
                        aria-label={image.altText}
                        aria-selected={modifiedActiveIndex === imageId}
                        aria-controls={`${props.id}__carousel-item__${imageId}`}
                        className='msc-ss-carousel-vert-button-wrapper'
                        onClick={onClick}
                        onKeyDown={handleKeyDown}
                    >
                        <Image
                            requestContext={props.context.actionContext.requestContext}
                            className='ms-media-gallery__thumbnail'
                            {...image}
                            gridSettings={props.context.request.gridSettings!}
                            imageSettings={props.config.thumbnailImageSettings ?? imageSettings}
                            loadFailureBehavior='default'
                        />
                    </Button>
                    <Node className='ms-fullscreen-section__overlay'>
                        <Button
                            onKeyDown={handleKeyDown}
                            title={props.resources.fullScreenTitleText}
                            role='button'
                            className='ms-fullscreen-section__magnifying-glass-icon'
                            onClick={onClick}
                        />
                    </Node>
                </Node>
            )
        };
    };

    /**
     * Gets the video thumbnail item to display media gallery.
     * @param props - The Media gallery view props from business layer.
     * @returns Return thumbnail view props which will be used to render video.
     */
    private readonly getVideoThumbNailItem = (
        props: IMediaGalleryViewProps & IMediaGalleryProps<IMediaGalleryConfig>
    ): IMediaGalleryThumbnailItemViewProps | null => {
        const video = this.videoData;
        if (video) {
            const videoData: IVideoData = video;
            const options: IPlayerOptions = props.config as IPlayerOptions;
            const videoMetaData: IVideoMetadata = {};
            videoMetaData.videoId = video._id;
            videoMetaData.title = video.title;
            videoMetaData.duration = video.playtime;
            if (videoData.thumbnail) {
                videoMetaData.posterframeUrl = videoData.thumbnail.src;
            }
            if (videoData._links?.binaryReferences) {
                videoMetaData.videoBinaryReferences = videoData._links.binaryReferences;
            }
            const videoPlayerData: IPlayerData = { options, metaData: videoMetaData };
            return {
                ThumbnailItemContainerProps: {
                    tag: 'li' as NodeTag,
                    className: 'msc-ss-carousel-vert-item ms-media-gallery__thumbnail-item',
                    role: 'presentation',
                    key: imageSource?.productId
                },
                Picture: (
                    <Node className='ms-fullscreen-section'>
                        <Button
                            role='tab'
                            aria-label={videoMetaData.title}
                            aria-controls={`${props.id}__carousel-item__${Number(videoMetaData.videoId)}`}
                            className='msc-ss-carousel-vert-button-wrapper'
                        >
                            <Video
                                className='ms-media-gallery__thumbnail'
                                editProps={{ key: video, requestContext: props.context.request }}
                            >
                                <Player playerData={videoPlayerData} />
                            </Video>
                        </Button>
                    </Node>
                )
            };
        }
        return null;
    };

    /**
     * Render the Media gallery thumbnails to represent images in grid view.
     * @param thumbnails - The thumbnail view props.
     * @param props - The media gallery view props.
     * @returns - The single slide carousel component to render as media gallery image.
     */
    private readonly renderThumbnails = (
        thumbnails: IMediaGalleryThumbnailsViewProps,
        props: IMediaGalleryViewProps & IMediaGalleryProps<IMediaGalleryConfig>
    ): JSX.Element => {
        // eslint-disable-next-line @typescript-eslint/naming-convention --  Dependency from media-gallery.tsx file
        const { ThumbnailsContainerProps, SingleSlideCarouselComponentProps } = thumbnails;
        const { state } = props;

        const items: IMediaGalleryThumbnailItemViewProps[] | undefined =
            // eslint-disable-next-line multiline-ternary -- need multiline for easy code reading
            state.lastUpdate && !ArrayExtensions.hasElements(state.mediaGalleryItems)
                ? [this.GetEmptyThumbnailItemComponent(this.defaultThumbnailImageSettings, props)]
                : // eslint-disable-next-line @typescript-eslint/naming-convention -- Dependency from media-gallery
                  state.mediaGalleryItems?.map((item: IImageData, id: number) =>
                      this.GetThumbnailItemComponent(item, this.defaultThumbnailImageSettings, id, state.activeIndex, props)
                  );
        if (props) {
            const videoItem = this.getVideoThumbNailItem(props);
            videoItem && items?.push(videoItem);
        }
        return (
            <Node {...ThumbnailsContainerProps}>
                <Node {...SingleSlideCarouselComponentProps}>{items?.map(this.renderThumbnailItem)}</Node>
            </Node>
        );
    };

    /**
     * GetVideoMetadataFromAPI - Makes API call to get video metadata.
     * @returns - Promise<AxiosResponse | undefined>.
     */
    private readonly getVideoMetadataFromApi = async (): Promise<void> => {
        /* eslint-disable  @typescript-eslint/no-explicit-any */
        let videoData: any;
        const videoId = await this.getVideoIdfromProduct();
        if (videoId) {
            await commerceVideoMetadataRequest(this.props.context.request, [videoId]).then(result => {
                videoData = result;
                if (videoData && videoData.data) {
                    this.videoData = videoData.data[0] as IVideoData;
                }
            });
        }
    };

    private readonly getVideoIdfromProduct = async (): Promise<string | undefined> => {
        const attributes: AttributeValue[] | undefined = this.props.data.productAttributes.result;
        let customAttributeValue;
        if (!attributes) {
            return undefined;
        }
        ArrayExtensions.validValues(
            attributes.map(item => {
                if (item.Name?.toLocaleLowerCase() === CustomAttributes.videoIdAttribute.toLocaleLowerCase()) {
                    customAttributeValue = item.TextValue || '';
                }
            })
        );
        return customAttributeValue;
    };
}

export default MediaGalleryView;
