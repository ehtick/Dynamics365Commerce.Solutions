/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';

import { ILanguagePickerData } from './language-picker.data';
import { ILanguagePickerProps } from './language-picker.props.autogenerated';

export interface ILanguagePickerViewProps extends ILanguagePickerProps<ILanguagePickerData> {
    onChange(e: React.MouseEvent<HTMLLIElement, MouseEvent>): void;
}

/**
 *
 * LanguagePicker component
 * @extends {React.PureComponent<ILanguagePickerProps<ILanguagePickerData>>}
 */
class LanguagePicker extends React.PureComponent<ILanguagePickerProps<ILanguagePickerData>> {
    public constructor(props: ILanguagePickerViewProps) {
        super(props);
        this._handleChange = this._handleChange.bind(this);
    }

    public render(): JSX.Element | null {
        const viewProps: ILanguagePickerViewProps = {
            ...(this.props as ILanguagePickerProps<ILanguagePickerData>),
            onChange: this._handleChange
        };
        return this.props.renderView(viewProps);
    }
    private _handleChange(e: React.MouseEvent<HTMLLIElement, MouseEvent>): void {
        this.setState({ value: e.currentTarget.id });
        const locale = e.currentTarget.id;
        let redirectPath = '';
        {
            /* link redirect flag decides whether to redirect to a link url in config
        for that locale or append locale to a base url and redirect */
        }
        if (this.props.config.linkRedirectFlag) {
            {
                /* if flag is true we will redirect to link url */
            }
            if (this.props.config.languages) {
                for (let i = 0; i < this.props.config.languages.length; i++) {
                    if (this.props.config.languages[i].code === locale) {
                        redirectPath = this.props.config.languages[i].linkUrl || '';
                        break;
                    }
                }
            }
            window.location.assign(redirectPath);
        } else {
            {
                /* append locale to the base url in config and redirect */
            }
            let redirectUrl = '';
            const baseUrl = this.props.config.linkBaseUrl;
            let path = this.props.context.request.url.requestUrl.pathname;
            // if the path has locale already then remove that locale code and have the / alone
            this.props.config.languages!.forEach((item, i) => {
                if (path.indexOf(`/${item.code}/`) > -1) {
                    path = path.replace(`/${item.code}/`, '/');
                }
                // if its home page and it ends with /en then replace/en with space
                if (this.props.context.request.url.requestUrl.href.endsWith(`/${item.code}`) && path.indexOf(`/${item.code}`) > -1) {
                    path = path.replace(`/${item.code}`, '');
                }
            });
            /* if base url ends with slash there is no need to append / before locale to url */
            if (baseUrl !== undefined && baseUrl.endsWith('/')) {
                if (locale !== undefined && locale.length > 0) {
                    redirectUrl = `${baseUrl}${locale}${path}${this.props.context.request.url.requestUrl.search}`;
                } else {
                    {
                        /* if locale code is empty then no need to append locale and we just redirect */
                    }
                    // remove the / from path in this case
                    path = path.replace(/^\/+/g, '');
                    redirectUrl = `${baseUrl}${path}${this.props.context.request.url.requestUrl.search}`;
                }
            } else {
                {
                    /* if base url doesn't end with slash then we need to append / after locale to url */
                }
                if (locale !== undefined && locale.length > 0) {
                    redirectUrl = `${baseUrl}/${locale}${path}${this.props.context.request.url.requestUrl.search}`;
                } else {
                    {
                        /* if locale code is empty then no need to append locale and we just redirect */
                    }
                    redirectUrl = `${baseUrl}${path}${this.props.context.request.url.requestUrl.search}`;
                }
            }
            window.location.assign(redirectUrl);
        }
    }
}

export default LanguagePicker;
