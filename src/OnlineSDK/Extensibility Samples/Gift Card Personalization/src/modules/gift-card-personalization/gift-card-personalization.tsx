/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import { observer } from 'mobx-react';
import { action } from 'mobx';
import { IModuleStateProps, withModuleState } from '@msdyn365-commerce-modules/checkout-utilities';
import { EmailRegex } from '@msdyn365-commerce-modules/retail-actions';
import { ICheckoutState } from '@msdyn365-commerce/global-state';
import { IGiftCardPersonalizationProps } from './gift-card-personalization.props.autogenerated';
import { IGiftCardPersonalizationData } from './gift-card-personalization.data';

interface IGiftCardPersonalizationState {
    personalize: boolean;
    recipientEmail: string;
    message: string;
    giftCartLineIndex: number;
}

export interface IGiftCardPersonalizationViewProps extends IGiftCardPersonalizationProps<IGiftCardPersonalizationData> {
    personalizeOptions: React.ReactNode;
}

export interface IGiftCardPersonalizationModuleProps
    extends IGiftCardPersonalizationProps<IGiftCardPersonalizationData>,
        IModuleStateProps {}

/**
 *
 * GiftCardPersonalization component
 * @extends {React.PureComponent<IGiftCardPersonalizationModuleProps, IGiftCardPersonalizationState>}
 */
@observer
class GiftCardPersonalization extends React.PureComponent<IGiftCardPersonalizationModuleProps, IGiftCardPersonalizationState> {
    public constructor(props: IGiftCardPersonalizationModuleProps) {
        super(props);
        this.state = { personalize: false, recipientEmail: '', message: '', giftCartLineIndex: -1 };
    }

    public async componentDidMount(): Promise<void> {
        void this.props.data.checkout.then(() => {
            this._initModuleState();
        });
    }

    public render(): JSX.Element | null {
        const viewProps = { ...this.props, personalizeOptions: this._renderPersonalizeOptions() };
        return this.props.renderView(viewProps);
    }

    private readonly _initModuleState = (): void => {
        const {
            data: { checkout }
        } = this.props;
        let giftCartLineIndex = checkout.result?.checkoutCart.cart.CartLines?.findIndex(cl => cl.IsGiftCardLine === true);
        if (giftCartLineIndex === undefined) {
            giftCartLineIndex = -1;
        }
        this.setState({ giftCartLineIndex: giftCartLineIndex });
        this.props.moduleState.init({
            status: giftCartLineIndex >= 0 ? 'updating' : 'disabled',
            onEdit: this.onEdit,
            onSubmit: this.onSubmit
        });
    };

    private readonly onEdit = (): void => {
        this.props.moduleState.onUpdating();
    };

    private readonly onReady = (): void => {
        this.props.moduleState.onReady();
    };

    private readonly onPending = (): void => {
        this.props.moduleState.onPending();
    };

    @action
    private readonly onSubmit = async (): Promise<void> => {
        if (this.state.personalize) {
            this.clearError();
            this.onPending();
            const isValid = this.isEmailValid(this.state.recipientEmail);
            if (!isValid) {
                this.props.moduleState.setHasError(true);
                this.props.moduleState.onUpdating();
            } else {
                try {
                    const checkoutState = this.props.data.checkout.result as ICheckoutState;
                    const cart = checkoutState.checkoutCart.cart;
                    if (
                        this.state.giftCartLineIndex !== -1 &&
                        cart.CartLines &&
                        cart.CartLines[this.state.giftCartLineIndex] !== undefined
                    ) {
                        cart.CartLines[this.state.giftCartLineIndex].ElectronicDeliveryEmail = this.state.recipientEmail;
                        cart.CartLines[this.state.giftCartLineIndex].ElectronicDeliveryEmailContent = this.state.message;

                        await checkoutState.checkoutCart
                            .updateCartLines({ updatedCartLinesObject: cart.CartLines })
                            .then(result => {
                                this.onReady();
                                this.props.moduleState.setIsCancellable(true);
                            })
                            .catch(error => {
                                this.props.context.actionContext.telemetry.warning(error);
                            });
                    }
                } catch {
                    this.setError('Failed to update cart');
                }
            }
        } else {
            this.clearError();
            this.onReady();
        }
    };

    private readonly isEmailValid = (email: string): boolean => {
        return EmailRegex.defaultRegex.test(email);
    };

    private readonly clearError = (): void => {
        this.props.moduleState.setHasError(false);
    };

    private readonly setError = (errorMessage: string): void => {
        this.props.telemetry.error(errorMessage);
        this.props.moduleState.setHasError(true);
        this.props.moduleState.onUpdating();
    };

    private readonly _renderPersonalizeOptions = (): JSX.Element | null => {
        return (
            <div>
                <div className={`personalize_options ${this.props.moduleState.isReady ? 'hide-personalization' : ''}`}>
                    <div className='personalize_wrapper'>
                        <label>
                            <input
                                type='checkbox'
                                disabled={this.props.moduleState.isReady}
                                className='email_input'
                                onChange={this._onPersonalize}
                                checked={this.state.personalize}
                            />
                            Personalize gift card
                        </label>
                    </div>
                    <div className={`inputs_wrapper ${this.state.personalize ? '' : 'hide-personalization'}`}>
                        <br />
                        <div className='ms-giftCardPersonalization__email_wrapper'>
                            <label className='ms-giftCardPersonalization__label'>Recipient Email:</label>
                            <input
                                type='text'
                                className='ms-giftCardPersonalization__input ms-giftCardPersonalization__input-text'
                                onChange={this._onEmailChange}
                                value={this.state.recipientEmail || ''}
                            />
                        </div>
                        <div className={`inputs_wrapper ${this.props.moduleState.hasError ? '' : 'hide-personalization'}`}>
                            <span className='input-error'>Please enter valid recipient email</span>
                        </div>
                        <br />
                        <div className='ms-giftCardPersonalization__email_wrapper'>
                            <label className='ms-giftCardPersonalization__label'>Message:</label>
                            <input
                                type='text'
                                className='ms-giftCardPersonalization__input ms-giftCardPersonalization__input-text'
                                onChange={this._onMessageChange}
                                value={this.state.message || ''}
                            />
                        </div>
                    </div>
                </div>
                <div className={`personalize_options_selected ${this.props.moduleState.isReady ? '' : 'hide-personalization'}`}>
                    <div>Personalize gift card: {this.state.personalize.toString()}</div>
                    <div className={`${this.state.personalize ? '' : 'hide-personalization'}`}>
                        <div>Recipient Email: {this.state.recipientEmail}</div>
                        <div>Message: {this.state.message}</div>
                    </div>
                </div>
            </div>
        );
    };

    private readonly _onPersonalize = (event: React.ChangeEvent<HTMLInputElement>): void => {
        this.setState({ personalize: !this.state.personalize });
        if (this.state.personalize) {
            this.setState({ recipientEmail: '', message: '' });
        }
    };

    private readonly _onEmailChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        const value = event.target.value;
        this.setState({ recipientEmail: value });
    };

    private readonly _onMessageChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        const value = event.target.value;
        this.setState({ message: value });
    };
}

export default withModuleState(GiftCardPersonalization);
