/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

/* eslint-disable no-duplicate-imports */
// import * as Msdyn365 from '@msdyn365-commerce/core';
import { Address, AddressPurpose, CountryRegionInfo, StateProvinceInfo } from '@msdyn365-commerce/retail-proxy';
import { format as formatNotification, getTelemetryObject, IModuleProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import { action, observable, reaction, set } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';

import { AutoSuggest } from '../../common/address-autosuggest';
import { IAutoSuggestOptions } from '../../common/address-autosuggest.data';
import { AddressCommon } from '../../common/address-common';
import { AddressFormat } from '../../common/address-format';
import { AddressItemType } from '../../common/address-format.data';
import { AddressMetaData } from '../../common/address-meta-data';
import { AddressOperation, AddressType, IAddressResource, IAddressResponse } from '../../common/address-module.data';
import { AddressAddUpdate, IAddressAddUpdateProps } from '../../common/components/address-add';
import { AddressList, IAddressListProps } from '../../common/components/address-list';

import { ICustomAccountManagementAddressData } from './custom-account-management-address.data';
import { ICustomAccountManagementAddressProps } from './custom-account-management-address.props.autogenerated';
import { BillingAddressButton, ShippingAddressButton } from '../../common/components/address-button';

/**
 * Account management address view state interface.
 */
export interface IAccountManagementAddressViewState {
    isShowAddresList: boolean;
    isShowBillingAddressList: boolean;
    isShowAddOrUpdateAddress: boolean;
}

/**
 * Account management address view state interface.
 */
export interface IAccountManagementAddressViewProps
    extends React.Component<ICustomAccountManagementAddressProps<ICustomAccountManagementAddressData>> {
    className: string;
    currentOperation: AddressOperation;
    selectedAddress?: Address;
    addUpdateAddress: Address;
    countryRegionId: string;
    stateProvinceInfo?: StateProvinceInfo[];
    customerAddresses: Address[];
    validationError: object;
    addressActionResponse?: IAddressResponse;
    viewState: IAccountManagementAddressViewState;
    AccountAddressManagement: IModuleProps;
    isUpdating: boolean;
    showAddressList: IAddressListProps;
    shippingButton: React.ReactNode;
    billingButton: React.ReactNode;
    showAddOrUpdateAddress: IAddressAddUpdateProps;
    screenReaderNotification: React.ReactNode;
}

/**
 *
 * Address component.
 * @extends {React.Component<ICustomAccountManagementAddressProps<ICustomAccountManagementAddressData>>}
 */
@observer
class AccountManagementAddress extends React.Component<ICustomAccountManagementAddressProps<ICustomAccountManagementAddressData>> {
    @observable private currentOperation: AddressOperation;

    @observable private currentListOperation: AddressOperation;

    @observable private selectedAddress?: Address;

    @observable private countryRegionId: string = 'USA';

    @observable private stateProvinceInfo?: StateProvinceInfo[];

    @observable private customerAddresses: Address[];

    @observable private addUpdateAddress: Address;

    @observable private validationError: object;

    @observable private addressActionResponse?: IAddressResponse;

    @observable private isUpdating?: boolean;

    @observable private hasError?: boolean;

    @observable private removeAddressData?: Address;

    private readonly addressCommon: AddressCommon;

    private addressFormat: AddressFormat;

    private countryRegions: CountryRegionInfo[] = [];

    private addressPurposes: AddressPurpose[] = [];

    private readonly resources: IAddressResource;

    private defaultAddressType: number = 6; // Default to Home

    private readonly telemetryContent: ITelemetryContent;

    private autoSuggest?: AutoSuggest;

    public constructor(props: ICustomAccountManagementAddressProps<ICustomAccountManagementAddressData>) {
        super(props);
        const { context, data, resources, telemetry } = this.props;

        this.resources = resources;
        this.currentOperation = AddressOperation.List;
        this.currentListOperation = AddressOperation.List;
        this.countryRegions = data.countryRegions.result || [];
        this.addressPurposes = data.addressPurposes.result || [];
        this.customerAddresses = data.address.result || [];
        this.addUpdateAddress = {};
        this.validationError = {};
        this.addressCommon = new AddressCommon(context, resources, telemetry);
        this.addressFormat = new AddressFormat(
            this.countryRegions,
            new AddressMetaData({ ...resources }, this._getAddressFormatExcludeList()),
            this.addressPurposes
        );
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
    }

    public async componentDidMount(): Promise<void> {
        const {
            context: {
                telemetry,
                actionContext: {
                    requestContext: { channel }
                }
            },
            config: { autoSuggestionEnabled, autoSuggestOptions }
        } = this.props;

        // Initializing data props
        this._dataInitialize(this.props);

        this.props.data.countryRegions.then(() => {
            this._setDefaultCountryRegionId();
        });

        reaction(
            () => this.countryRegionId,
            () => {
                this._getStateProvinces();
            }
        );

        reaction(
            () => this.currentOperation,
            () => {
                this._getStateProvinces();
            }
        );

        if (autoSuggestionEnabled) {
            if (channel && !channel.BingMapsApiKey) {
                telemetry.error('BingMapsApiKey is missing.');
                return;
            }

            if (channel && !channel.BingMapsEnabled) {
                telemetry.error('Map is disabled from HQ.');
                return;
            }

            const options: IAutoSuggestOptions = { ...autoSuggestOptions };
            this.autoSuggest = new AutoSuggest(
                telemetry,
                options,
                channel?.BingMapsApiKey,
                channel?.ChannelCountryRegionISOCode,
                channel?.DefaultLanguageId
            );

            reaction(
                () =>
                    this.props.data.storeSelectorStateManager.result?.loadMapApi !== undefined &&
                    (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update),
                async () => {
                    await this.autoSuggest?._loadMapAPI(await this.props.data.storeSelectorStateManager);
                }
            );

            reaction(
                () => {
                    this.props.data.storeSelectorStateManager.result?.isMapApiLoaded;
                },
                async () => {
                    if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {
                        await this._attachMapAutoSuggest();
                    }
                }
            );
        }
    }

    /**
     * Component did mount function.
     */
    public async componentDidUpdate(): Promise<void> {
        if (this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update) {
            if (this.props.data.storeSelectorStateManager.result?.isMapApiLoaded) {
                await this._attachMapAutoSuggest();
            }
        } else {
            this.autoSuggest?.disposeAutoSuggest();
        }
    }

    /**
     * Should component update function.
     * @param nextProps - Account management address props.
     * @param nextState - Next state.
     * @returns - True if component should update, false otherwise.
     */
    public shouldComponentUpdate(
        nextProps: ICustomAccountManagementAddressProps<ICustomAccountManagementAddressData>,
        nextState: IAccountManagementAddressViewState
    ): boolean {
        if (this.state === nextState && this.props.data === nextProps.data) {
            return false;
        }
        return true;
    }

    public render(): JSX.Element {
        const { renderView, config } = this.props;

        const viewProps = {
            ...this.props,
            currentOperation: this.currentOperation,
            selectedAddress: this.selectedAddress,
            addUpdateAddress: this.addUpdateAddress,
            countryRegionId: this.countryRegionId,
            stateProvinceInfo: this.stateProvinceInfo,
            customerAddresses: this.customerAddresses,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            isUpdating: this.isUpdating,
            hasError: this.hasError,
            className: config.className,
            viewState: {
                isShowAddresList: this.currentOperation === AddressOperation.List,
                isShowBillingAddressList: this.currentOperation === AddressOperation.BillingList,
                isShowAddOrUpdateAddress:
                    this.currentOperation !== AddressOperation.List && this.currentOperation !== AddressOperation.BillingList
            },
            AccountAddressManagement: {
                moduleProps: this.props,
                className: classnames('ms-account-management-address', config.className)
            },
            showAddressList: this._renderListAddress(),
            showAddOrUpdateAddress: this._renderAddOrUpdateAddress(),
            screenReaderNotification: this.removeAddressData ? this._renderScreenReaderRemoveText(this.removeAddressData) : null,
            shippingButton: (
                <ShippingAddressButton
                    {...{
                        className: 'msc-address-list__button-add msc-btn',
                        text: 'Shipping Address',
                        ariaLabel: this.props.resources.addressAddButtonAriaLabel,
                        telemetryContent: this.telemetryContent,
                        onClick: this._goToShippingAddAddress
                    }}
                />
            ),
            billingButton: (
                <BillingAddressButton
                    {...{
                        className: 'msc-address-list__billing-button-add msc-btn',
                        text: 'Billing Address',
                        ariaLabel: this.props.resources.addressAddButtonAriaLabel,
                        telemetryContent: this.telemetryContent,
                        onClick: this._goToBillingAddAddress
                    }}
                />
            )
        };

        return renderView(viewProps) as React.ReactElement;
    }

    /**
     * On Suggestion Selected Function.
     * @param result - Microsoft.Maps.ISuggestionResult.
     */
    @action
    private readonly _onSuggestionSelected = async (result: Microsoft.Maps.ISuggestionResult): Promise<void> => {
        this._clearAddressFields();
        const address = this.addressFormat.getTranformedAddress(result, this.stateProvinceInfo);
        set(this.addUpdateAddress, { Street: '' });
        set(this.addUpdateAddress, { ZipCode: address.ZipCode });
        set(this.addUpdateAddress, { CountyName: address.CountyName });
        set(this.addUpdateAddress, { City: address.City });
        set(this.addUpdateAddress, { State: address.State });
        set(this.addUpdateAddress, { DistrictName: address.DistrictName });
        set(this.addUpdateAddress, { FullAddress: address.FullAddress });

        // Bing autosuggest put the complete address in the Street input box. Updating the street input box to show only street address.
        setTimeout(() => {
            set(this.addUpdateAddress, { Street: address.Street });
        }, 0);
    };

    /**
     * Clear Address Fields.
     */
    @action
    private readonly _clearAddressFields = (): void => {
        const addressFormatItem = this.addressFormat.getAddressFormat(
            this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId
        );
        addressFormatItem.forEach(format => {
            if (this.addUpdateAddress[format.name] !== undefined && !this.autoSuggest?.excludedAddressFields.includes(format.name)) {
                this.addressFormat[format.name] = '';
            }
        });
        this._clearValidation();
    };

    /**
     * Clear Validation Function.
     */
    @action
    private readonly _clearValidation = (): void => {
        this.validationError = {};
    };

    /**
     * Method data initialization.
     * @param props -The account management props.
     */
    private readonly _dataInitialize = (props: ICustomAccountManagementAddressProps<ICustomAccountManagementAddressData>): void => {
        const { data } = props;

        reaction(
            () => data.countryRegions.result,
            () => {
                this.countryRegions = data.countryRegions.result ?? [];
            }
        );

        reaction(
            () => data.addressPurposes.result,
            () => {
                this.addressPurposes = data.addressPurposes.result ?? [];
            }
        );

        reaction(
            () => data.address.result,
            () => {
                this.customerAddresses = data.address.result ?? [];
            }
        );
    };

    /**
     * Render Add Or Update Address Function.
     * @returns - AddressAddUpdate.
     */
    private readonly _renderAddOrUpdateAddress = (): IAddressAddUpdateProps => {
        return AddressAddUpdate({
            isUpdating: this.isUpdating,
            resources: this.resources,
            addressType: AddressType.Shipping,
            currentOperation: this.currentListOperation,
            addressFormat: this.addressFormat.getAddressFormat(this.addUpdateAddress.ThreeLetterISORegionName || this.countryRegionId),
            defaultCountryRegionId: this.countryRegionId,
            defaultAddressType: this.defaultAddressType,
            selectedAddress: this.addUpdateAddress,
            validationError: this.validationError,
            addressActionResponse: this.addressActionResponse,
            dropdownDisplayData: this.addressFormat.getPrefilledAddressDropdownData(
                this.resources.addressStateDefaultSelectionText,
                this.stateProvinceInfo
            ),
            telemetryContent: this.telemetryContent,
            onInputChange: this._onAddressAddUpdateInputChange,
            onDropdownChange: this._onAddressAddUpdateDropdownChange,
            onSave: this._onAddressAddUpdateSubmit,
            onCancel: this._resetView
        });
    };

    /**
     * Render List Address Function.
     * @returns - AddressList.
     */
    private readonly _renderListAddress = (): IAddressListProps => {
        const { config } = this.props;

        /**
         * Render Address ttitle.
         * @param event - Msdyn365.ContentEditableEvent.
         */
        // const handleLineItemHeadingChange = (event: Msdyn365.ContentEditableEvent) => {
        //     config.heading!.text = event.target.value;
        // };
        const heading = config.heading && {
            text: config.heading.text,
            headingTag: config.heading.tag
        };

        return AddressList({
            isUpdating: this.isUpdating,
            selectedAddress: this.selectedAddress,
            addressFormat: this.addressFormat,
            addresses: this.customerAddresses,
            addressPurposes: this.addressPurposes,
            resources: this.resources,
            heading,
            currentOperation: this.currentOperation,
            primaryAddressSectionHeading: config.primaryAddressSectionHeading,
            otherAddressSectionHeading: config.otherAddressSectionHeading,
            billingAddressSectionHeading: config.billingAddressSectionHeading,
            contextRequest: this.props.context.request,
            telemetryContent: this.telemetryContent,
            onEditAddress: this._goToEditAddress,
            onRemoveAddress: this._onRemoveAddress,
            onAddAddress: this._goToAddAddress,
            onUpdatePrimaryAddress: this._onSubmitUpdatePrimaryAddress
        });
    };

    /**
     * Attach Map Auto Suggest Function.
     */
    private readonly _attachMapAutoSuggest = async (): Promise<void> => {
        const {
            data: {
                storeSelectorStateManager: { result: storeSelectorStateManager }
            }
        } = this.props;

        if (storeSelectorStateManager?.isMapApiLoaded) {
            this.autoSuggest?.attachAutoSuggest('#shipping_addressstreet', '#shipping_addressstreet_container', this._onSuggestionSelected);
        }
    };

    /**
     * On Address Add Update Function.
     * @param name - String.
     * @param value - String | Boolean | Number.
     */
    private readonly onAddressAddUpdate = (name: string, value: string | boolean | number) => {
        set(this.addUpdateAddress, { [name]: value });
        this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId, name);
    };

    /**
     * On Address Add Update Input Change.
     * @param event - Input Change Event.
     */
    private readonly _onAddressAddUpdateInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
        if (event.target.type === 'checkbox') {
            this.onAddressAddUpdate(event.target.name, event.target.checked);
        } else {
            const value = (event.target.value || '').replace(new RegExp('[<>]', 'gi'), '');
            this.onAddressAddUpdate(event.target.name, value);
        }
    };

    /**
     * On Address Add Update Dropdown Change.
     * @param event - Dropdown Change Event.
     */
    private readonly _onAddressAddUpdateDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {
        if (event.target.name === AddressItemType[AddressItemType.AddressTypeValue]) {
            this.onAddressAddUpdate(event.target.name, +event.target.value);
        } else {
            this.onAddressAddUpdate(event.target.name, event.target.value);
        }
        if (event.target.name === AddressItemType[AddressItemType.ThreeLetterISORegionName]) {
            this._onCountryChange(event.target.value);
        }
    };

    /**
     * On Address Update Function.
     * @param response - Promise<IAddressResponse>.
     * @param onSuccess - IAddressResponse.
     */
    private readonly _onAddressUpdate = (response: Promise<IAddressResponse>, onSuccess: (response: IAddressResponse) => void): void => {
        this.isUpdating = true;
        response.then(
            (result: IAddressResponse) => {
                if (result.address) {
                    this.hasError = false;
                    onSuccess(result);
                } else {
                    this.hasError = true;
                    this.addressActionResponse = result;
                }
                this.isUpdating = false;
            },
            () => {
                this.hasError = true;
                this.isUpdating = false;
            }
        );
    };

    /**
     * On Address Add Update Submit Function.
     */
    private readonly _onAddressAddUpdateSubmit = (): void => {
        if (!this.addressFormat.validateAddressFormat(this.addUpdateAddress, this.validationError, this.countryRegionId)) {
            return;
        }
        let response: Promise<IAddressResponse>;
        if (this.addressCommon.isAuthenticatedFlow()) {
            response =
                this.currentOperation === AddressOperation.Update
                    ? this.addressCommon.updateCustomerAddress(this.addUpdateAddress)
                    : this.addressCommon.addCustomerAddress(this.addUpdateAddress);
        } else {
            response = Promise.resolve({ address: this.addUpdateAddress });
        }

        this._onAddressUpdate(response, this._onAddOrUpdateSuccess);
    };

    /**
     * On Country Change Function.
     * @param countryRegionId - String.
     */
    private readonly _onCountryChange = (countryRegionId: string) => {
        this.countryRegionId = countryRegionId;
        const twoLetterISORegionName = this.addressFormat.getTwoLetterISORegionName(countryRegionId);
        set(this.addUpdateAddress, { ThreeLetterISORegionName: countryRegionId });
        set(this.addUpdateAddress, { TwoLetterISORegionName: twoLetterISORegionName });
        this.autoSuggest?.changeAutoSuggestionCountryCode(twoLetterISORegionName);
        this._clearAddressFields();
    };

    /**
     * Get Address Format Exclude List Function.
     * @returns - Address Format Exclude List.
     */
    private readonly _getAddressFormatExcludeList = (): AddressItemType[] => {
        const { config } = this.props;
        const addressFormatExcludeList: AddressItemType[] = [];

        if (!config.showAddressType) {
            addressFormatExcludeList.push(AddressItemType.AddressTypeValue);
        }

        addressFormatExcludeList.push(AddressItemType.IsPrimary);

        return addressFormatExcludeList;
    };

    /**
     * Get State Provinces Function.
     */
    private readonly _getStateProvinces = (): void => {
        if (
            !this.countryRegionId ||
            !(this.currentOperation === AddressOperation.Add || this.currentOperation === AddressOperation.Update)
        ) {
            return;
        }

        this.addressCommon.getStateProvinces(this.countryRegionId).then((result: StateProvinceInfo[]) => {
            const stateInfo = result.some(state => state.StateId === this.addUpdateAddress.State);

            // Reset state if selected state not found in the list.
            if (!stateInfo) {
                set(this.addUpdateAddress, { State: '' });
            }
            this.stateProvinceInfo = result;
        });
    };

    private _setDefaultCountryRegionId(): void {
        const { request } = this.props.context;
        const market = request && request.channel && request.channel.ChannelCountryRegionISOCode;

        this.countryRegionId = this.addressCommon.getDefaultCountryRegionId(this.countryRegionId, this.countryRegions, market);
    }

    /**
     * Update CurrentOperation Function.
     * @param operation - AddressOperation.
     */
    private readonly _updateCurrentOperation = (operation: AddressOperation) => {
        this.currentOperation = operation;
        this._clearAddressFields();
    };

    /**
     * On Submit Update Primary Address Function.
     * @param address - Address.
     */
    private readonly _onSubmitUpdatePrimaryAddress = (address: Address): void => {
        this.selectedAddress = address;
        const response = this.addressCommon.updateCustomerPrimaryAddress(address);
        this._onAddressUpdate(response, this._onUpdatePrimaryAddressSuccess);
    };

    /**
     * Go To Edit Address Function.
     * @param address - Address.
     */
    private readonly _goToEditAddress = (address: Address): void => {
        this.addUpdateAddress = { ...address };
        this.countryRegionId = this.addUpdateAddress.ThreeLetterISORegionName || 'USA';
        this._updateCurrentOperation(AddressOperation.Update);
    };

    /**
     * On Remove Address Function.
     * @param address - Address.
     */
    private readonly _onRemoveAddress = (address: Address): void => {
        address.Deactivate = true;
        this.removeAddressData = address;
        const response = this.addressCommon.updateCustomerAddress(address);
        this._onAddressUpdate(response, this._onAddOrUpdateSuccess);
    };

    /**
     * Renders Notification screen reader text for removed address.
     * @param address - Address input.
     * @returns Notification for removed address.
     */
    private readonly _renderScreenReaderRemoveText = (address: Address): React.ReactNode => {
        const notification = formatNotification(this.resources.removeAddressNotification!, `${address.Name!}`);
        return (
            <div className='remove-address-screen-reader' aria-live='polite'>
                {notification}
            </div>
        );
    };

    /**
     * Go To Add Address Function.
     */
    private readonly _goToAddAddress = (): void => {
        this.addUpdateAddress = {};
        this._setDefaultCountryRegionId();
        set(this.addUpdateAddress, { ThreeLetterISORegionName: this.countryRegionId });
        set(this.addUpdateAddress, { AddressTypeValue: this.defaultAddressType });
        this._setDefaultCountryRegionId();
        this._updateCurrentOperation(AddressOperation.Add);
    };

    private readonly _goToShippingAddAddress = (): void => {
        this.currentOperation = AddressOperation.List;
        this.currentListOperation = AddressOperation.List;
        this.defaultAddressType = 6;
    };

    private readonly _goToBillingAddAddress = (): void => {
        this.currentOperation = AddressOperation.BillingList;
        this.currentListOperation = AddressOperation.BillingList;
        this.defaultAddressType = 1;
    };

    /**
     * On Add Or Update Success Function.
     * @param response - IAddressResponse.
     */
    private readonly _onAddOrUpdateSuccess = (response: IAddressResponse): void => {
        if (response.customerAddresses) {
            this.customerAddresses = response.customerAddresses;
        }
        this._resetView();
    };

    /**
     * On Update Primary Address Success Function.
     * @param response - IAddressResponse.
     */
    private readonly _onUpdatePrimaryAddressSuccess = (response: IAddressResponse): void => {
        if (response.customerAddresses) {
            this.customerAddresses = response.customerAddresses;
        }
    };

    /**
     * Reset view function.
     */
    private readonly _resetView = (): void => {
        this.selectedAddress = undefined;
        this._updateCurrentOperation(
            this.currentListOperation === AddressOperation.BillingList ? AddressOperation.BillingList : AddressOperation.List
        );
    };
}

export default AccountManagementAddress;
