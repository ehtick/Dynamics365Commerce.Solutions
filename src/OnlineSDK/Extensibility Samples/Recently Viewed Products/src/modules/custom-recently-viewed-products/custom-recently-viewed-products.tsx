/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';
import {
    format,
    Heading,
    IComponentNodeProps,
    IModuleProps,
    INodeProps,
    ISingleSlideCarouselProps,
    NodeTag,
    SingleSlideCarousel
} from '@msdyn365-commerce-modules/utilities';
import { ProductComponent } from '@msdyn365-commerce/components';
import { ProductSearchResult } from '@msdyn365-commerce/retail-proxy';
import classnames from 'classnames';
import { ICustomRecentlyViewedProductsData } from './custom-recently-viewed-products.data';
import { ICustomRecentlyViewedProductsProps, layout } from './custom-recently-viewed-products.props.autogenerated';

export interface IProductCollectionViewProps extends ICustomRecentlyViewedProductsProps<{}> {
    heading?: React.ReactNode;
    ProductCollectionContainer: IModuleProps;
    SingleSlideCarouselComponentProps: INodeProps;
    GridComponentProps: INodeProps;
    products: IProductComponentViewProps[];
    isCarousel: boolean;
}

export interface IProductComponentViewProps {
    ProductContainer: INodeProps;
    productComponent: React.ReactNode;
}

/**
 * ProductCollection component
 */
class ProductCollection extends React.PureComponent<ICustomRecentlyViewedProductsProps<ICustomRecentlyViewedProductsData>> {
    public render(): JSX.Element | null {
        const { heading, className } = this.props.config;
        const { fullProductsSearchResultsWithCount } = this.props.data;
        const { resources } = this.props;
        const isCarousel = this.props.config.layout === layout.carousel;
        const headingComponent = heading && (
            <Heading className='ms-product-collection__heading' headingTag={heading.tag} text={heading.text} />
        );

        const productCollectionViewProps = {
            ...this.props,
            heading: headingComponent,
            SingleSlideCarouselComponentProps: {
                tag: SingleSlideCarousel,
                className: '',
                flipperPrevLabel: resources.flipperPrevious,
                flipperNextLabel: resources.flipperNext,
                parentId: this.props.id
            } as IComponentNodeProps<ISingleSlideCarouselProps>,
            ProductCollectionContainer: {
                moduleProps: this.props,
                className: classnames('ms-product-collection', className)
            },
            GridComponentProps: {
                tag: 'ul' as NodeTag,
                className: 'ms-product-collection__items'
            },
            isCarousel: isCarousel,
            // tslint:disable-next-line: max-line-length
            products:
                fullProductsSearchResultsWithCount &&
                fullProductsSearchResultsWithCount.result &&
                fullProductsSearchResultsWithCount.result.products.length > 0 &&
                fullProductsSearchResultsWithCount.result.products.map((item: ProductSearchResult, index: number) =>
                    this._getProduct(item, index)
                )
        };
        return this.props.renderView(productCollectionViewProps) as React.ReactElement;
    }
    private _getProduct = (product: ProductSearchResult, index: number): IProductComponentViewProps | null => {
        if (!product || !product.Name) {
            this.props.telemetry.trace('[product-collection] Product or product name is null');
            return null;
        }
        const { imageSettings } = this.props.config;
        const resources = this.props.resources;
        return {
            ProductContainer: {
                tag: 'li' as NodeTag,
                className: 'ms-product-collection__item',
                role: 'listitem',
                key: index
            },
            productComponent: (
                <ProductComponent
                    context={this.props.context}
                    imageSettings={imageSettings}
                    freePriceText={resources.priceFree}
                    originalPriceText={resources.originalPriceText}
                    currentPriceText={resources.currentPriceText}
                    ratingAriaLabel={format(resources.ratingAriaLabel, product.AverageRating, 5)}
                    id={this.props.id}
                    typeName={this.props.typeName}
                    data={{ product: product }}
                />
            )
        };
    };
}

export default ProductCollection;
