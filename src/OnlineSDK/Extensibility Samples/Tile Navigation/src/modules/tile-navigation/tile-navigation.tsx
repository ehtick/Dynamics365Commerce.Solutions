/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import * as React from 'react';

import { generateImageUrl } from '@msdyn365-commerce-modules/retail-actions';
import { getPayloadObject, getTelemetryObject, IPayLoad, ITelemetryContent, onTelemetryClick } from '@msdyn365-commerce-modules/utilities';
import { CategoryHierarchy } from '@msdyn365-commerce/commerce-entities';
import { IImageData, IImageSettings, Image, IRequestContext } from '@msdyn365-commerce/core';
import { ITileNavigationData } from './tile-navigation.data';
import { ITileNavigationProps } from './tile-navigation.props.autogenerated';
export interface ITileNavigationViewProps extends ITileNavigationProps<ITileNavigationData> {
    tiles: React.ReactNode;
}

/**
 *
 * TileNavigation component
 * @extends {React.PureComponent<ITileNavigationProps<ITileNavigationData>>}
 */
class TileNavigation extends React.PureComponent<ITileNavigationProps<ITileNavigationData>> {
    public categoryIdFromUrl: number | undefined;
    private readonly telemetryContent: ITelemetryContent;
    private readonly payLoad: IPayLoad;

    constructor(props: ITileNavigationProps<ITileNavigationData>) {
        super(props);
        this._getCategoryIdFromRequestContextUrl = this._getCategoryIdFromRequestContextUrl.bind(this);
        this._getRequestContext = this._getRequestContext.bind(this);
        this._getCategoryFromUrl = this._getCategoryFromUrl.bind(this);
        this.categoryIdFromUrl = this.categoryIdFromUrl;
        // Navigte to plp page
        this.telemetryContent = getTelemetryObject(
            this.props.context.request.telemetryPageName!,
            this.props.friendlyName,
            this.props.telemetry
        );
        this.payLoad = getPayloadObject('click', this.telemetryContent, '', '');
    }
    public componentDidMount(): void {
        this._getCategoryFromUrl();
    }

    public render(): JSX.Element | null {
        const { data } = this.props;

        // Traverse recursively through results to get category object at any level
        const tileNavigationViewProps = {
            ...this.props,
            tiles: this._getMenuTiles(data)
        };
        return this.props.renderView(tileNavigationViewProps);
    }
    private _getCategoryFromUrl(): void {
        const requestContext = this._getRequestContext();
        const categoryFromUrl = this._getCategoryIdFromRequestContextUrl(requestContext);
        this.categoryIdFromUrl = categoryFromUrl;
    }

    private _getCategoryIdFromRequestContextUrl(requestContext: IRequestContext): number {
        return Number(requestContext?.urlTokens.itemId || (requestContext.query && requestContext.query.categoryId)) || 0;
    }

    private _getRequestContext(): IRequestContext {
        const { context } = this.props;
        return context && context.actionContext && context.actionContext.requestContext;
    }
    private customFilter = (object: CategoryHierarchy, categoryId: number | undefined): CategoryHierarchy | null => {
        const nestedChildren = {};
        if (object?.hasOwnProperty('RecordId') && object.RecordId === categoryId) {
            Object.assign(nestedChildren, object);
        }
        if (object.Children && object.Children.length > 0) {
            object.Children.forEach(obj => {
                const o = this.customFilter(obj, categoryId);
                if (o !== null) {
                    Object.assign(nestedChildren, o);
                }
                return nestedChildren;
            });
        }
        return nestedChildren as CategoryHierarchy;
    };

    private _getMenuTiles = (data: ITileNavigationData): JSX.Element => {
        const getByCategoryId = this.categoryIdFromUrl || this.props.config.categoryId || 0;
        if (getByCategoryId === 0) {
            // Return root level tiles
            return (
                <div className='tile-list-unstyled'>
                    <div className='tile-category-name'>{'Root-All'}</div>
                    <div className='tile-category-list'>
                        {data &&
                            data.categories &&
                            data.categories.result &&
                            data.categories.result.map((item: CategoryHierarchy, index: number) => (
                                <a
                                    className='tile-list-item'
                                    key={index}
                                    href={item.Url}
                                    onClick={onTelemetryClick(this.telemetryContent, this.payLoad, item.Name ? item.Name : '')}
                                >
                                    <div className='tile-list-item-img'>
                                        {item.Images && item.Images[0] && item.Images[0].Uri && this._updateCategoryImage(item)}
                                    </div>
                                    <div className='tile-list-item-name'>
                                        <h4 className='tile-list-item-name-title'>{item.Name}</h4>
                                    </div>
                                </a>
                            ))}
                    </div>
                </div>
            );
        } else {
            const tileComponent =
                data &&
                data.categories &&
                data.categories.result?.map(item => {
                    return this.customFilter(item, getByCategoryId);
                });

            // Get filtered category object
            const categoryToDisplay = tileComponent?.filter(item => item?.RecordId)[0];
            if (Object(categoryToDisplay).hasOwnProperty('Children')) {
                this.payLoad.contentAction.etext = categoryToDisplay?.Name;
                return (
                    <div className='tile-list-unstyled'>
                        <div className='tile-category-name'>{`${categoryToDisplay?.Name}`}</div>
                        <div className='tile-category-list'>
                            {categoryToDisplay &&
                                categoryToDisplay.Children &&
                                categoryToDisplay.Children.map((item: CategoryHierarchy, index: number) => (
                                    <a
                                        className='tile-list-item'
                                        key={index}
                                        href={item.Url}
                                        onClick={onTelemetryClick(this.telemetryContent, this.payLoad, item.Name ? item.Name : '')}
                                    >
                                        <div className='tile-list-item-img'>
                                            {item.Images && item.Images[0] && item.Images[0].Uri && this._updateCategoryImage(item)}
                                        </div>
                                        <div className='tile-list-item-name'>
                                            <h4 className='tile-list-item-name-title'>{item.Name}</h4>
                                        </div>
                                    </a>
                                ))}
                        </div>
                    </div>
                );
            } else {
                return (
                    // when no sub category exists
                    <div className='tile-list-unstyled'>
                        <div className='tile-category-name'>{`${categoryToDisplay?.Name}`}</div>
                        <span className='tile-category-name'>{this.props.resources.noSubcategoryMsg}</span>
                    </div>
                );
            }
        }
    };

    private _updateCategoryImage = (option: CategoryHierarchy): React.ReactNode | null => {
        const categoryName = option && option.Name ? option.Name : '';
        const categoryImageObj = option && option.Images && option.Images[0];
        const categoryImageSrc = categoryImageObj ? categoryImageObj.Uri : '';
        const categoryImageAltText = categoryImageObj && categoryImageObj.AltText ? categoryImageObj.AltText : categoryName;
        const categoryImage: IImageData = { src: categoryImageSrc, altText: categoryImageAltText };
        return this._getCategoryImage(categoryImage);
    };

    private readonly _getCategoryImage = (categoryImage?: IImageData): React.ReactNode | null => {
        if (!categoryImage || !categoryImage.src) {
            return null;
        }

        const categoryImageUrl = generateImageUrl(categoryImage.src, this.props.context.actionContext.requestContext.apiSettings);
        const defaultImageSettings: IImageSettings = {
            viewports: {
                xs: { q: 'w=300&h=250&m=8', w: 0, h: 0 },
                sm: { q: 'w=300&h=250&m=8', w: 0, h: 0 },
                md: { q: 'w=300&h=250&m=8', w: 0, h: 0 },
                lg: { q: 'w=300&h=250&m=8', w: 0, h: 0 }
            },
            lazyload: true
        };
        if (categoryImageUrl !== undefined) {
            const ImageData: IImageData = { src: categoryImageUrl };
            return (
                <Image
                    requestContext={this.props.context.actionContext.requestContext}
                    className='ms-nav-image__item'
                    {...ImageData}
                    gridSettings={this.props.context.request.gridSettings!}
                    imageSettings={this.props.config.imageSettings || defaultImageSettings}
                    loadFailureBehavior='empty'
                    role='tabpanel'
                    id={`${categoryImage.src}__categoryImage`}
                    altText={categoryImage.altText}
                />
            );
        }
        return null;
    };
}

export default TileNavigation;
